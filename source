#include <iostream>
#include <vector>
#include <ctime>
#include <cstdlib>
#include <cmath>

std::vector<bool> dvoich(int a) //перевод из десятичного в двоичного
{
    std::vector<bool> temp_2;
    std::vector<bool> result;
    while(a >= 2)
    {
        if (a % 2)
        {
            temp_2.push_back(1);
        }
        else
        {
            temp_2.push_back(0);
        }
        a /= 2;
    }
    if (a == 1)
        temp_2.push_back(1);
    else temp_2.push_back(0);

    for(int i = temp_2.size()-1; i>=0; i--)
    {
        result.push_back(temp_2[i]);
    }
    return result;
}

int desyatich (std::vector<bool> a)
{
    int k,j=0;
    for (int i=a.size()-1; i>=0; i--)
    {
        k+=a[j]*pow(2, i);
        j++;
    }
    return k;
}

class gammirovanie
{
public:
    std::string text; //Исходный текст
    std::vector<std::vector<bool>> text_2; //Исходный текст в довичном коде ASCII
    std::vector<std::vector<bool>> gamma; //Гамма для шифрования
    std::string c_text; //Зашифрованный текст
    std::vector<std::vector<bool>> c_text_2; // Зашифрованный текст в двочиыном коде

    gammirovanie(): text("0"), c_text("0") //Конструктор по умолчанию
    {
        gamma.push_back(std::vector<bool>(0));
        text_2.push_back(std::vector<bool>(0));
        c_text_2.push_back(std::vector<bool>(0));
    };

    gammirovanie(std::string text1): text(text1) //Пользовательский конструктор
    {
        for(int i = 0; i < text.size(); i++)
        {
            text_2.push_back(dvoich(int(text[i])));
        }

        gamma.resize(text_2.size());
        c_text_2.resize(text_2.size());
        for (int i = 0; i<gamma.size(); i++)
        {
            c_text_2[i].resize(text_2[i].size());
            gamma[i].resize(text_2[i].size());
        }

        for (int i=0; i<gamma.size(); i++)
        {
            for (int k = 0; k<gamma[i].size(); k++)
            {
                gamma[i][k] = rand() %2;
            }
        }
        shifr();

        for (int i=0; i<c_text_2.size(); i++)
        {
            c_text.push_back(char(desyatich(c_text_2[i])));
        }
    };

    void shifr ()
    {
        for (int i=0; i<gamma.size(); i++)
        {
            for (int k=0; k<gamma[i].size(); k++)
            {
                if (text_2[i][k] == gamma[i][k]) c_text_2[i][k] = 0;
                else c_text_2[i][k] = 1;
            }
        }
    }

    void print ()
    {
        std::cout << text << std::endl;
        for (int i=0; i<text_2.size(); i++)
        {
            for (int k=0; k<text_2[i].size(); k++)
            {
                std::cout << text_2[i][k];
            }
        }
        std::cout << std::endl;
        for (int i=0; i<gamma.size(); i++)
        {
            for (int k=0; k<gamma[i].size(); k++)
            {
                std::cout << gamma[i][k];
            }
        }
        std::cout << std::endl;
        for (int i=0; i<c_text_2.size(); i++)
        {
            for (int k=0; k<c_text_2[i].size(); k++)
            {
                std::cout << c_text_2[i][k];
            }
        }
        std::cout << std::endl;
        std::cout << c_text;
    }

};

int main()
{
    srand(time(NULL));
    gammirovanie a("Hello World");
    a.print();

}
